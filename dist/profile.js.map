{
  "version": 3,
  "sources": ["../bin/live-reload.js", "../src/profile.js"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener('change', () => location.reload());\n", "// Webflow already globally defined in custom code\nWebflow.push(function () {\n  // DOMready has fired\n\n  // check if member is logged in\n  const memberstack = window.$memberstackDom;\n  memberstack.getCurrentMember().then(({ data: member }) => {\n    if (member) {\n      // logged in logic here\n\n      const localImageFile = localStorage.getItem('imageFile');\n      const localImageURL = localStorage.getItem('imageUrl');\n\n      const currentUrl = window.location.href;\n      const urlParams = new URLSearchParams(new URL(currentUrl).search);\n\n      // Get passwords and buttons\n      const updateButton = document.querySelector('[discover-element=\"update-password\"]');\n      const submitButton = document.querySelector('[discover-element=\"submit-password\"]');\n      const passwordError = document.querySelector('.profile_header_form-error');\n      const passwordInput = document.querySelector('[discover-element=\"new-password\"]');\n      const passwordInput2 = document.querySelector('[discover-element=\"new-password2\"]');\n\n      const userTypes = localStorage.getItem('types');\n      let typesArray = userTypes?.split(',');\n      const userFields = localStorage.getItem('fields');\n      let fieldsArray = userFields?.split(',');\n      const allTypes = document.querySelectorAll('[discover-element=\"type-embed\"]');\n      const allFields = document.querySelectorAll('[discover-element=\"field-embed\"]');\n      const typeTemplate = document.querySelector('[discover-element=\"type-template\"]');\n      const fieldTemplate = document.querySelector('[discover-element=\"field-template\"]');\n\n      const fieldsForm = document.querySelector('[d-e=\"types-form\"]');\n      const typesForm = document.querySelector('[d-e=\"fields-form\"]');\n      const typesButton = document.querySelector('[d-e=\"update-types\"]');\n      const fieldsButton = document.querySelector('[d-e=\"update-fields\"]');\n\n      const form = document.getElementById('image-form');\n      const imageInput = document.querySelector('#image-input');\n\n      const profileType = document.querySelector('[data-ms-member=\"profile-type\"]');\n      const ageWrap = document.querySelector('[discover-element=\"age-wrap\"]');\n\n      // Update the Profile Image\n      if (localImageURL && localImageFile) {\n        document.querySelector('[discover-element=\"profile-image\"]').src = localImageFile;\n      }\n\n      // Open the tab based on param\n      if (urlParams.has('tab')) {\n        const tabValue = urlParams.get('tab');\n        document.querySelector(`[data-w-tab=\"${tabValue}\"]`).click();\n      }\n\n      // CHeck is passwords match\n      updateButton.addEventListener('click', () => {\n        if (passwordInput.value === passwordInput2.value) {\n          // Hide error and click submit if passwords match\n          passwordError.style.display = 'none';\n          submitButton.click();\n        } else {\n          // Show error message if passwords don't match\n          passwordError.style.display = 'block';\n        }\n      });\n\n      // Update the Types and Fields from local storage\n\n      const updateTypesOnPage = (source) => {\n        typeTemplate.style.display = 'flex';\n        const { parentElement } = typeTemplate;\n        const { children } = parentElement;\n\n        // iterate over all types except first one and remove them\n        for (let i = children.length - 1; i > 0; i--) {\n          // remove the current type\n          parentElement.removeChild(children[i]);\n        }\n\n        allTypes.forEach((eachType) => {\n          const typeRecord = eachType.querySelector('.profile_header_interests-id').innerHTML;\n\n          if (typesArray?.includes(typeRecord)) {\n            // Checking the type by clicking on it\n            if (source === 'localStorage') {\n              eachType.getElementsByTagName('input')[0].click();\n            }\n            // Getting the type text\n            const typeText = eachType.querySelector('.profile_header_tabs-interest').innerHTML;\n\n            // Creating the new template for the type and appending it\n            const newTypeTemplate = typeTemplate.cloneNode(true);\n            newTypeTemplate.innerHTML = typeText;\n            typeTemplate.parentElement.append(newTypeTemplate);\n          }\n        });\n        typeTemplate.style.display = 'none';\n      };\n\n      const updateFieldsOnPage = (source) => {\n        fieldTemplate.style.display = 'flex';\n\n        const { parentElement } = fieldTemplate;\n        const { children } = parentElement;\n\n        // iterate over all fields except first one and remove them\n        for (let i = children.length - 1; i > 0; i--) {\n          // remove the current type\n          parentElement.removeChild(children[i]);\n        }\n\n        allFields.forEach((eachField) => {\n          const fieldRecord = eachField.querySelector('.profile_header_interests-id').innerHTML;\n\n          if (fieldsArray?.includes(fieldRecord)) {\n            if (source === 'localStorage') {\n              eachField.getElementsByTagName('input')[0].click();\n            }\n            //   eachField.getElementsByTagName(\"input\")[0].checked = true;\n            const fieldText = eachField.querySelector('.profile_header_tabs-interest').innerHTML;\n            const newFieldTemplate = fieldTemplate.cloneNode(true);\n            newFieldTemplate.innerHTML = fieldText;\n            fieldTemplate.parentElement.append(newFieldTemplate);\n          }\n        });\n\n        fieldTemplate.style.display = 'none';\n      };\n\n      updateTypesOnPage('localStorage');\n      updateFieldsOnPage('localStorage');\n\n      // Logic to update the Member types and fields\n\n      // API to update user interests\n      const updateUserInAirtable = (event, payload) => {\n        var myHeaders = new Headers();\n        myHeaders.append('Content-Type', 'application/json');\n\n        const airtableId = localStorage.getItem('airtableId');\n\n        var raw = JSON.stringify({\n          event: event,\n          payload: payload,\n          id: airtableId,\n        });\n\n        var requestOptions = {\n          method: 'PUT',\n          headers: myHeaders,\n          body: raw,\n          redirect: 'follow',\n        };\n\n        fetch(`https://discover-plus-server.herokuapp.com/api/v1/user/${member.id}`, requestOptions)\n          .then((response) => response.text())\n          .then((result) => {\n            if (event === 'types.updated') {\n              updateTypesOnPage('api');\n              localStorage.setItem('types', typesArray.join(','));\n              document.querySelector('[discover-element=\"add-remove-types\"]')?.click();\n            } else if (event === 'fields.updated') {\n              updateFieldsOnPage('api');\n              localStorage.setItem('fields', fieldsArray.join(','));\n              document.querySelector('[discover-element=\"add-remove-fields\"]')?.click();\n            }\n            console.log(result);\n          })\n          .catch((error) => console.log('error', error));\n      };\n\n      typesButton.addEventListener('click', (e) => {\n        typesArray = [];\n        allTypes.forEach((eachType) => {\n          const typeRecord = eachType.querySelector('.profile_header_interests-id').innerHTML;\n          const typeCheck = eachType.querySelector('[d-e=\"checkbox\"]');\n          let typeChecked = false;\n          if (typeCheck.classList.contains('w--redirected-checked')) {\n            typeChecked = true;\n            typesArray.push(typeRecord);\n          }\n        });\n\n        updateUserInAirtable('types.updated', typesArray);\n      });\n\n      fieldsButton.addEventListener('click', (e) => {\n        fieldsArray = [];\n        allFields.forEach((eachField) => {\n          const fieldRecord = eachField.querySelector('.profile_header_interests-id').innerHTML;\n          const fieldCheck = eachField.querySelector('[d-e=\"checkbox\"]');\n          let fieldChecked = false;\n          if (fieldCheck.classList.contains('w--redirected-checked')) {\n            fieldChecked = true;\n            fieldsArray.push(fieldRecord);\n          }\n        });\n\n        updateUserInAirtable('fields.updated', fieldsArray);\n      });\n\n      // Manage user image upload\n\n      imageInput.addEventListener('change', (event) => {\n        const file = event.target.files[0];\n\n        if (file.size > 1 * 1024 * 1024) {\n          console.error('File size exceeds 1MB limit');\n          document.querySelector('.profile_header_image-message').innerHTML =\n            'File size sould be less than 1mb';\n          document.querySelector('.profile_header_image-message').style.display = 'block';\n          return;\n        }\n        document.querySelector('.profile_header_image-message').style.display = 'none';\n\n        document.querySelector('#profile_header_image-button').style.display = 'block';\n\n        // Do something with the file\n      });\n\n      const fetchAndStoreImage = async (url) => {\n        try {\n          const response = await fetch(url);\n          const blob = await response.blob();\n          const reader = new FileReader();\n\n          reader.onloadend = function () {\n            const base64data = reader.result;\n            localStorage.setItem('imageFile', base64data);\n            localStorage.setItem('imageUrl', url);\n            document.querySelector('[discover-element=\"navbar-image\"]').src = base64data;\n            document.querySelector('[discover-element=\"profile-image\"]').src = base64data;\n          };\n\n          reader.readAsDataURL(blob);\n        } catch (error) {\n          console.error('Error fetching and storing image:', error);\n        }\n      };\n\n      form.addEventListener('submit', async function (event) {\n        event.preventDefault();\n\n        document.querySelector('.profile_header_image-message').innerHTML = 'Uploading Image';\n        document.querySelector('.profile_header_image-message').style.display = 'block';\n\n        const airtableId = localStorage.getItem('airtableId');\n        const imageInput = document.querySelector('#image-input');\n\n        if (imageInput.files[0].size > 1 * 1024 * 1024) {\n          console.error('File size exceeds 1MB limit');\n          return;\n        }\n\n        const formData = new FormData(form);\n        formData.append('id', `${airtableId}`);\n        const response = await fetch(\n          `https://discover-plus-server.herokuapp.com/api/v1/user/${member.id}`,\n          {\n            method: 'PUT',\n            body: formData,\n            event: 'image.updated',\n          }\n        );\n\n        if (response.ok) {\n          const jsonResponse = await response.json();\n          console.log('Image uploaded successfully', jsonResponse);\n          fetchAndStoreImage(jsonResponse.imageUrl);\n          document.querySelector('.profile_header_image-message').style.display = 'none';\n        } else {\n          document.querySelector('.profile_header_image-message').innerHTML = 'Error';\n          console.error('Error uploading image:', response.status, response.statusText);\n        }\n      });\n\n      // Getting the value to select field and showing age dropdown\n      profileType.addEventListener('change', function (event) {\n        const selectedValue = event.target.value;\n        if (selectedValue === 'Student') {\n          ageWrap.style.display = 'block';\n        } else {\n          ageWrap.style.display = 'none';\n        }\n      });\n\n      if (profileType.value === 'Student') {\n        ageWrap.style.display = 'block';\n      } else {\n        ageWrap.style.display = 'none';\n      }\n    } else {\n      //  logged out logic here\n    }\n  });\n});\n// });\n"],
  "mappings": "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",
  "names": ["imageInput"]
}
